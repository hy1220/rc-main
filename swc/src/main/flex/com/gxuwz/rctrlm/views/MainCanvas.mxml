<?xml version="1.0"?>
<!--
  Created by xjzx on 2015/7/25.
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:conserverbar="com.gxuwz.rctrlm.views.conServerBar.*"
          xmlns:chat="com.gxuwz.rctrlm.views.chat.*"
          xmlns:aperture="com.gxuwz.rctrlm.utils.fluorinefx.aperture.*"
          xmlns:command="com.gxuwz.rctrlm.views.command.*"
          paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"
          creationComplete="creationCompleteHandler()">

    <fx:Script><![CDATA[
        import com.gxuwz.rctrlm.events.CommandEvent;
        import com.gxuwz.rctrlm.events.ConServerBarEvent;
        import com.gxuwz.rctrlm.events.EventDispatcherFactory;
        import com.gxuwz.rctrlm.events.SendPanelEvent;
        import com.gxuwz.rctrlm.events.UserAddEvent;
        import com.gxuwz.rctrlm.model.Services;
        import com.gxuwz.rctrlm.views.chat.SendPanel

        import mx.collections.ArrayCollection;

        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;
        import mx.utils.ObjectUtil;

        import spark.components.Alert;

        /**
         * the  main task are :
         * 1.connect to server
         * 2.user login in server
         * 3.set the netstream and net connection into sub module
         * 4.set the csBar status
         */
        /**
         * 定义变量，进行传值
         */

//        [Bindable] private var _netConnection:NetConnection;
//        [Bindable] private var _netStream:NetStream;
        [Bindable] private var _msgString:String;
        [Bindable] private var _remoteUser:String;
        [Bindable] private var _lc:LocalObject;
        [Bindable] private var _playoff:Boolean = false;
        [Bindable] private var netConn:NetConnection;
        [Bindable] private var netStr:NetStream;
        [Bindable] private var userList:ArrayCollection;

        /**
         * 监听连接服务状况
         */
        private function creationCompleteHandler():void {
            //add connection to service user
            EventDispatcherFactory.getEventDispatcher()
                    .addEventListener(CommandEvent.SEND_COMMAND_FROM_EXPERT,
                    onSendCommandToMachineEventHandler);
            EventDispatcherFactory.getEventDispatcher()
                    .addEventListener(UserAddEvent.USER_CONNECTION_WITH_SERVICE_FROM_SERVER,
                    userConnectWithServiceEventHandler);
            //呼叫远程用户过程
            EventDispatcherFactory.getEventDispatcher()
                    .addEventListener(ConServerBarEvent.PLAY_VIDEO_EVENT,
                    callRemoteUserStatusEventHandler);
            userList = new ArrayCollection();
            _lc = lc;//为内部组件传值
        }

        /***************************************************************************/

        /**
         * make sure connection the miscroscope
         * result from Servives class
         * @param e
         */
        private function callRemoteUserStatusEventHandler(e:ConServerBarEvent):void {
            if (e.action == "Accept") {
                csBar.currentState = csBar.callEstablished;
                _playoff = true;
            } else if (e.action == "Reject") {
                Alert.show("对方拒绝接受显微镜连接\n", "提示！");
                _playoff = false;
                csBar.currentState = csBar.callFailed;
            }else if(e.action == "Disconnect"){
                netConn.close();
                netConn=null;
            }
            csBar.ringerChooseBool = false;
        }


        /****************************************************************/

        private function onFault(e:FaultEvent):void {
            trace(" result from LocalObject is " + e.fault);
        }

        private function onOpenComExecute(e:ResultEvent):void {
            trace(" result from openComFun is :" + e.result)
            var msg:String = ObjectUtil.toString(e.result);
        }

        private function onCloseComExecute(e:ResultEvent):void {
            trace(" result from onCloseComFun is :" + e.result)
        }

        private function onSendComExecute(e:ResultEvent):void {
            trace(" result from onSendComFun is :" + e.result)
        }

        private function onReadComExecute(e:ResultEvent):void {
            trace(" result from onSendComFun is :" + e.result)
        }

        private function onOutStringExecute(event:ResultEvent):void {
            var msg:String = ObjectUtil.toString(event.result);
        }

        /******************************************************************************/

        private function csBar_ConnectToServerEventHandler(event:MouseEvent):void {
            netConn = new NetConnection();
            netConn.client = new Services();
            netConn.addEventListener(NetStatusEvent.NET_STATUS, netConnectionStatusHandler);
            try {
                netConn.connect(csBar.serverAddrInput.text); //连接网络
                csBar.currentState=csBar.loginConnecting;
            } catch (e:Error) {
                Alert.show("连接服务失败", "提示");
            }
        }

        /**
         * 1. connect to server success ,the user login
         * 2. if connect success ,the csBar currentstatus will be change
         * @param e
         */

        private function netConnectionStatusHandler(e:NetStatusEvent):void {
            var netStatus:String = e.info.code as String;
            switch (netStatus) {
                case "NetConnection.Connect.Success":
                    netConn.call("onIdentification", null, csBar.userNameInput.text);
                    csBar.currentState = csBar.callReady; //状态改变
                    break;
                case "NetConnection.Connect.Closed":
                        Alert.show("连接关闭", "提示");
                        csBar.currentState=csBar.loginNotConnected;
                        csBar.ringerChooseBool=false;
                    break;
                case "NetConnection.Connect.Failed":
                        Alert.show("连接失败", "提示");
                        csBar.currentState=csBar.loginNotConnected;
                    csBar.ringerChooseBool=false;
                    break;
            }
        }

        //check  and add user
        private function userConnectWithServiceEventHandler(evt:UserAddEvent):void {

            if (evt.action =="connection") {
                if ((evt.user).toString() != (csBar.userNameInput.text).toString())
                    userList.addItem(evt.user);
                trace("here ");
                csBar.currentState = csBar.callReady; //状态改变
            } else {
                var index:int = userList.getItemIndex(evt.user);
                if (index > -1)
                    userList.removeItemAt(index);
            }
            trace(userList + " user in mainCanvas");
        }

        /**
         * disconnection from expert and termination connection with expert
         * @param event
         * function:1.disconnection to server
         */
        private function csBar_DisconnectToServerEventHandler(event:MouseEvent):void {
            netConn.call("callUser", null, _remoteUser, "Disconnect");
            csBar.currentState = csBar.loginNotConnected;
            csBar.ringerChooseBool = false;
            _playoff = false;
            netConn.close();
            netConn=null;
        }

        /**
         * whild calling remoter user and try to cancel but don't disconnection to server
         * @param event
         * function:1.stop ring
         *          2.chang status to call ready
         */
        private function csBar_CancelToCallUserEventHandler(event:MouseEvent):void {
            csBar.ringerChooseBool = false;
            csBar.currentState = csBar.callReady;
        }

        /**
         * call remote epxert
         * @param event
         */
        private function csBar_CallExpertEventHandler(event:MouseEvent):void {
            if (imgVideoCtrl.camera) {
                trace("csBar.calleeInput.text   "+csBar.calleeInput.text);
                netConn.call("callUser", null, csBar.calleeInput.text, csBar._Invite);
                _remoteUser=csBar.calleeInput.text;
                csBar.ringerChooseBool = true;
                csBar.currentState = csBar.callCalling
            } else {
                Alert.show("请先连接显微镜");
                csBar.ringerChooseBool = false;
                csBar.currentState = csBar.callReady;
            }
        }


        private function onSendCommandToMachineEventHandler(e:CommandEvent):void{
            _lc.sendMessageFun(e.action);
        }
        ]]>
    </fx:Script>
    <!-- 显微镜端-->

    <fx:Declarations>
        <!-- 将非可视元素（例如服务、值对象）放在此处 -->
        <aperture:LocalObject id="lc" showBusyCursor="false"
                              source="ATLDll:3EFA84FB-67FC-46A5-8C7A-4B58D844EDCC"
                              fault="onFault(event)">
            <aperture:methods>
                <aperture:method name="openComFun" result="onOpenComExecute(event)"/>
                <aperture:method name="closeComFun" result="onCloseComExecute(event)"/>
                <aperture:method name="sendMessageFun" result="onSendComExecute(event)"/>
                <aperture:method name="readMessageFun" result="onReadComExecute(event)"/>
            </aperture:methods>
        </aperture:LocalObject>

    </fx:Declarations>
    <!-- 登录-->
    <conserverbar:ConServerBar id="csBar" width="100%"
                               ConnectToServerEvent="csBar_ConnectToServerEventHandler(event)"
                               DisconnectToServerEvent="csBar_DisconnectToServerEventHandler(event)"
                               CallExpertEvent="csBar_CallExpertEventHandler(event)"
                               CancelToCallUserEvent="csBar_CancelToCallUserEventHandler(event)"/>
    <!-- 视频图片区-->
    <command:ImgVideoCtrl id="imgVideoCtrl"
                          width="100%" height="100%"
                          netConnection="{netConn}"
                          lc="{lc}"
                          playoff="{_playoff}"
                          remoteUser="{_remoteUser}"/>
    <!--  netStream="{_netStream}"-->
    <!--enabled="false"-->
    <!--<chat:Chat id="chat"-->
               <!--netConnection="{_netConnection}"-->
               <!--remoteUser="{_remoteUser}"-->
               <!--width="100%"/>-->
</s:VGroup>
