<?xml version="1.0"?>
<!--
  Created by user on 2015/8/23.
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:videoContext="com.gxuwz.rctrlm.views.videoCtrl.*"
          xmlns:img="com.gxuwz.rctrlm.views.imgShowList.*"
          xmlns:start="com.gxuwz.rctrlm.views.startInit.*"
          xmlns:commands="com.gxuwz.rctrlm.views.command.*"
          xmlns:sendPanel="com.gxuwz.rctrlm.views.chat.*"
          creationComplete="creationCompleteHandler()">
    <!--
    Class introduce:initialize
    Function:
         1.Connect to Service
         2.Public the video and audio
         3.Send the message to the dll file
         4.Call the exe file from the outside;
    Work Step:
        1.receive the netConnect form the Main Class which MainCanvas
        2.Setting the camera, step configure is
             (1).handler the No_FocusInitEvent event
             (2).call NO_Focus_Open_cv.exe to get the result message
             (3).get the com port and then the lc open the com
             (4).open the com
        3.select the camera,and then get the camera
              (1) get camera,
              (2) if ouStream then attach(camera);
              (3) waiting call some one,and then ,if the remoter accpet then publish outSteam
              (4)NOTICE: fist we should get the inStream and publish the outStream;
        4.get the video and audio play or publish once we get replay from remote user
              (1) if connection then identified outStream(publish) and inStream(play);
              (2) if outStream then outStream.attach(camera.selectCameraIndex);
              (3) first we should get inStream and play inStream .play("service");
              (4) then we get cam and micscrophone and publish
        5.set focus:
              (1)execute the Obj_con_rest;
              (2)execute the focusInitEvent
              (3)if _auto_Focus attachCamera(null);
              (4)execute the closeEvent
              (5)execute the autoFocus;call open_cv_pic.exe
              (6)get the auto_focus and then set to comNum;
              (7)if(auto_focus!=0) execute initAfterOpen() function
              (8)execute initAfterOpen() function
              (9)get the camera Index if(outStream) then cattach(camera);
              (10)camera select Event;

            NOTICE: writeToTxt(string) function is log
    -->

    <fx:Script><![CDATA[
        import com.gxuwz.rctrlm.events.CommandEvent;
        import com.gxuwz.rctrlm.events.ConServerBarEvent;
        import com.gxuwz.rctrlm.events.EventDispatcherFactory;
        import com.gxuwz.rctrlm.events.SendPanelEvent;
        import com.gxuwz.rctrlm.model.Services;
        import com.gxuwz.rctrlm.utils.WriteToText;
        import com.gxuwz.rctrlm.utils.fluorinefx.aperture.LocalObject;
        import com.gxuwz.rctrlm.views.imgShowList.ImageShow;

        import flash.media.Camera;

        import mx.controls.Alert;

        import com.gxuwz.rctrlm.events.SendPanelEvent;

        import mx.core.FlexGlobals;

        import mx.core.SoundAsset;

        /**
         * 调用融合图片主程序的exe所需的全局变量
         */
        public var _process:NativeProcess = new NativeProcess();

        [Bindable] private var inStream:NetStream;
        [Bindable] private var outStream:NetStream;

        [Bindable] private var _netConnection:NetConnection;
        [Bindable] private var _lc:LocalObject;
        [Bindable] private var _playoff:Boolean;

        [Bindable] private var cameraIndex:int = 0;
        [Bindable] public var camera:Camera;
        [Bindable] private var mic:Microphone;
        [Bindable] private var video:Video=new Video(); //只为关闭显微镜初始话操作
        private var localSO:SharedObject;
        public var _autoFocusProcess:NativeProcess = new NativeProcess();
        /**
         * 定义自动对焦所需的全局变量
         */
        public var _autoFocus:Number = 0;

        public var comNum:String = "COM1";

        public function get lc():LocalObject {
            return _lc;
        }

        public function set lc(value:LocalObject):void {
            _lc = value;
            writeToTxt(_lc.toString());
        }

        public function get netConnection():NetConnection {
            return _netConnection;
        }

        public function set netConnection(value:NetConnection):void {
            _netConnection = value;
        }

        public function get playoff():Boolean {
            return _playoff;
        }

        public function set playoff(value:Boolean):void {
            _playoff = value;
            if (_playoff) {
                //发布视频
               publicVideo();
            }else if(_playoff==false){
                //Alert.show("请连接显微镜");
                cameraIndex=0;
                inStream=null;
                outStream=null;
            }else{
                Alert.show("请连接显微镜再操作","提示");
            }
        }

        private function creationCompleteHandler():void {
            EventDispatcherFactory.getEventDispatcher()
                    .addEventListener(ConServerBarEvent.SHOW_MESSAGE_EVENT,
                    showMessageEventHandler);
        }

        /**************   图片处理   开始 ******************/
        private function picHandler_takePicEventHandler():void {

            var bmpd:BitmapData = new BitmapData(vdCtrl.localVdCam_vd.width, vdCtrl.localVdCam_vd.height);
            try {
                bmpd.draw(vdCtrl.localVdCam_vd);
            }
            catch (e:Error) {
                // could not draw so don't draw
                Alert.show("安全沙箱出错!");
            }

            var imgShow:ImageShow = new ImageShow();  //取得相片并保存
            imgShow.image.source = bmpd;
            imgShwList.addElement(imgShow);
            imgShow.addEventListener("onDeleteImgShowEvent", deleteBitmap, false, 0, true);
            imgShow.addEventListener("onSelectedImgEvent", selectedBitmap, false, 0, true);
            imgShow.addEventListener("onCancelSelectedImgEvent", cancelSelectedBitmap, false, 0, true);
            imgShow.addEventListener("onSaveImgEvent", saveBitmap, false, 0, true);
        }

        /**删除，函数
         *点击删除按钮删除位图。
         */
        public function deleteBitmap(event:Event):void {

            var imgSh:ImageShow = event.currentTarget as ImageShow;
            if (imgSh.selected_chb.selected) {

                imgSh.selected_chb.selected = false;
                imgShwList.removeElement(event.currentTarget as ImageShow);

                imgShwList.selectedImgNumber = imgShwList.selectedImgNumber - 1;
                switch (imgShwList.selectedImgNumber) {
                    case 0:
                        picHandler.edit_bt.enabled = false;
                        picHandler.merge_bt.enabled = false;
                        break;
                    case 1:
                        picHandler.edit_bt.enabled = true;
                        picHandler.merge_bt.enabled = true;
                        break;
                    case 2:
                    case 3:
                        picHandler.edit_bt.enabled = false;
                        picHandler.merge_bt.enabled = true;
                        break;
                }
            } else {
                imgShwList.removeElement(event.currentTarget as ImageShow);
            }
        }

        public function selectedBitmap(event:Event):void {

            imgShwList.selectedImgNumber = imgShwList.selectedImgNumber + 1;
            if (imgShwList.selectedImgNumber == 1) {
                picHandler.edit_bt.enabled = true;
            }
            if (imgShwList.selectedImgNumber >= 2) {
                picHandler.edit_bt.enabled = false;
                picHandler.merge_bt.enabled = true;
            }
            if (imgShwList.selectedImgNumber > 3) {
                Alert.show("你已经选择了3张图片，不能再选择了！");
                imgShwList.selectedImgNumber = imgShwList.selectedImgNumber - 1;
                var imgsh:ImageShow = event.currentTarget as ImageShow;
                imgsh.selected_chb.selected = false;
            }
        }

        public function cancelSelectedBitmap(event:Event):void {
            imgShwList.selectedImgNumber = imgShwList.selectedImgNumber - 1;
            if (imgShwList.selectedImgNumber == 0) {
                picHandler.edit_bt.enabled = false;
            }
            if (imgShwList.selectedImgNumber == 1) {
                picHandler.edit_bt.enabled = true;
            }
            if (imgShwList.selectedImgNumber >= 2) {
                picHandler.edit_bt.enabled = false;
                picHandler.merge_bt.enabled = true;
            }

        }

        public function saveBitmap(event:Event):void {

            var imgSh:ImageShow = event.currentTarget as ImageShow;
            imgSh.save();
        }


        protected function exit_bt_clickHandler():void {
            // TODO Auto-generated method stub
            if (_process)
                _process.exit(false);
        }

        protected function edit_bt_clickHandler():void {
            // TODO Auto-generated method stub
            for (var i:int = 0; i < imgShwList.numElements; i++) {
                var imgSh:ImageShow = imgShwList.getElementAt(i) as ImageShow;
                imgSh.dispatchEvent(new Event("onSaveImgEvent"));
            }
            msctrlEXE(1);
        }

        protected function merge_bt_clickHandler():void {
            // TODO Auto-generated method stub
            trace("imgShwList.numElements:" + imgShwList.numElements);
            for (var i:int = 0; i < imgShwList.numElements; i++) {
                var imgSh:ImageShow = imgShwList.getElementAt(i) as ImageShow;
                imgSh.dispatchEvent(new Event("onSaveImgEvent"));
            }
            msctrlEXE(2);
        }

        private function msctrlEXE(number:int):void {

            try {
                var _processArgs:Vector.<String> = new Vector.<String>();
                var _nativeProcessStartupInfo:NativeProcessStartupInfo = new NativeProcessStartupInfo();
                _nativeProcessStartupInfo.executable = File.applicationDirectory.resolvePath("bin/MSCtrl.exe");
//            _nativeProcessStartupInfo.executable = File.applicationStorageDirectory.resolvePath("G:/projects/microscope/rCtrlMicroscope-air-main/air/src/main/resources/bin/MSCtrl.exe");
                _processArgs.push(number);
                _nativeProcessStartupInfo.arguments = _processArgs;
                trace("_process:" + _process);
                try {
                    if (_process)
                        _process.start(_nativeProcessStartupInfo);
                } catch (e:Error) {
                    if (_process) {
                        Alert.show("图片处理程序已经在运行!");
                    }
                }
            } catch (e:ErrorEvent) {
                Alert.show("图片操作失败");
            }

        }

        /**************   图片处理   结束 ******************/

        /**************   显微镜处理  开始 ******************/
        //选择显微镜
        private function startInit_CameraSelectionEventHandler(event:Event = null):void {
            if (camera) {
                startInit.initFocus_no_Focus.enabled = true;
            }
        }

        /**
         * StartInit组件上，打开com按钮的功能有两个：
         * 1.调用DLL启动com
         * 2.将输入的com端口号保存到共享数据localSO中
         */
        protected function startInit_OpenComEventHandler(event:MouseEvent):void {

            //if(_autoFocus!=0)
            //{

            lc.openComFun(comNum); //open the com port
            //}
            /*localSO.data.comIndex=startInit.comNm_ti.text;

             try
             {
             localSO.flush();
             }
             catch (e:Error)
             {
             trace("Cannot write shared object\n");
             }*/
        }


        public function No_focusInit():void {
            // handler the No_FocusInitEvent
            // writeToTxt("handler the No_FocusInitEvent execute No_focusInit()");

            vdCtrl.localVdCam_vd.attachCamera(null);
            startInit.dispatchEvent(new MouseEvent("CloseComEvent"));
            No_autoFocus(); //before connect to camera we set focus to reset
            if (_autoFocus != 0) {
                commandPanel.enabled = false;
                picHandler.enabled = false;
                _autoFocus = 0;
            }
//            initAfterOpenCom();
        }

        private function No_autoFocus():void {

            try {
                var _autoNativeProcessStartupInfo:NativeProcessStartupInfo = new NativeProcessStartupInfo();
                _autoNativeProcessStartupInfo.executable = File.applicationDirectory.resolvePath("autoFocus/No_focus_opencv_pic.exe");
                //  _autoNativeProcessStartupInfo.executable = File.applicationDirectory.resolvePath("G:/projects/microscope/rCtrlMicroscope-air-main/air/src/main/resources/autoFocus/No_focus_opencv_pic.exe");
                _autoFocusProcess.addEventListener(NativeProcessExitEvent.EXIT, onExit_NoFocus);
                _autoFocusProcess.start(_autoNativeProcessStartupInfo);
            } catch (e:ErrorEvent) {
                Alert.show("自动对焦失败", "错误!");
            }
        }

        private function onExit_NoFocus(e:NativeProcessExitEvent):void {

            writeToTxt("从自动对焦程序中返回的代码：" + e.exitCode + "执行打开端口程序；得到的数据 COM" + e.exitCode);
            _autoFocus = e.exitCode;
            Alert.show(_autoFocus+"是打开端口程序返回的结果");
            if (_autoFocus) {
                commandPanel.enabled = true;
                picHandler.enabled = true;
            }
            //不返回0的时候，开启显微镜
            if (_autoFocus != 0) {
                comNum = "COM" + _autoFocus;
                startInit.dispatchEvent(new MouseEvent("OpenComEvent"));
                // after open com and then attach camera
                initAfterOpenCom();  //after the open com and then try to attach camera and try to publish
            }
            trace("Conversion complete.");
        }

        /**
         * 点击聚焦按钮,开始聚焦
         */
        public function focusInit():void {
            vdCtrl.localVdCam_vd.attachCamera(null);
            startInit.dispatchEvent(new MouseEvent("CloseComEvent"));
            autoFocus();
            if (_autoFocus != 0) {
                commandPanel.enabled = false;
                picHandler.enabled = false;
                _autoFocus = 0;
            }

        }

        private function autoFocus():void {
            //关闭显微镜
            if (outStream) {
                outStream.attachCamera(null);
            }
            camera=null;
            try {
                var _autoNativeProcessStartupInfo:NativeProcessStartupInfo = new NativeProcessStartupInfo();
                _autoNativeProcessStartupInfo.executable = File.applicationDirectory.resolvePath("autoFocus/opencv_pic_cut.exe");
//                _autoNativeProcessStartupInfo.executable = File.applicationDirectory.resolvePath("G:/projects/microscope/rCtrlMicroscope-air-main/air/src/main/resources/autoFocus/No_focus_opencv_pic.exe");
                var args:Vector.<String> = new Vector.<String>();
                args.push(comNum);
                _autoNativeProcessStartupInfo.arguments = args;
                _autoFocusProcess.addEventListener(NativeProcessExitEvent.EXIT, onExit);
                _autoFocusProcess.start(_autoNativeProcessStartupInfo);
            } catch (e:ErrorEvent) {
                Alert.show("显微镜关闭");
            }
        }

        private function onExit(e:NativeProcessExitEvent):void {
            _autoFocus = e.exitCode;
            trace("Com:" + _autoFocus);
            if (_autoFocus) {
                commandPanel.enabled = true;
                picHandler.enabled = true;
            }
            if (_autoFocus != 0) {
                comNum = "COM" + _autoFocus;
                startInit.dispatchEvent(new MouseEvent("OpenComEvent"));
                initAfterOpenCom();  //after get the camera ,we waiting call for some one or publish the video
            }
            trace("Conversion complete.");
        }


        /**
         *
         * 在成功打开com之后，才开始初始化。主要初始化的内容：
         * 如果localSO存取的数据不为空，则执行
         * 1.从共享数据保存变量localSO获取摄像头、音响、连接服务器用户等数据
         * 2.将startInit中选择摄像头选项修改为localSO数据中保存的数据
         * 3.启动摄像头并通过startInit_CameraSelectionEventHandler（）方法传到VideoCrtl中显示
         */
        private function initAfterOpenCom():void {
            // selected camera device
//            if (localSO.data.hasOwnProperty("cameraIndex")) {
//                trace("camera open:" + cameraIndex);
//                cameraIndex = localSO.data.cameraIndex;
//            }else{
//            }
          //  trace(cameraIndex + "cameraIndex");
          //  camera = Camera.getCamera(cameraIndex.toString()); //get the camera
          //  mic = Microphone.getEnhancedMicrophone();
//            // if netconnection ,we say that it should be publish for remote user

//          if(_playoff && cameraIndex){
               // publicVideo();
//          }else{

             publicLocal();
//          }
        }

        private function publicLocal():void {
                video.attachCamera(null);//释放摄像头
                //vdCtrl.localVdCam_vd.attachCamera(null);//无效的
                //camera=null;//关闭摄像头无效
                cameraIndex = startInit.cameraSelection_cb.selectedIndex; //get the camera index
                camera = Camera.getCamera(cameraIndex.toString()); //get the camera
                //  cameraIndex = startInit.cameraSelection_cb.selectedIndex; //get the camera index
                //startInit.cameraSelection_cb.enabled=false;
                if(camera){
                    camera.setMode(2592,1944,24,true);
                    var vi:Video= new Video(camera.width,camera.height); //初始化已经定义
                    vi.height = vdCtrl.localVdCam_vd.height;
                    vi.width = vdCtrl.localVdCam_vd.width;
                    vi.attachCamera(camera);
                    vdCtrl.localVdCam_vd.addChild(vi);
                    video=vi;
//                    video.x=vdCtrl.localVdCam_vd.x+(vdCtrl.localVdCam_vd.width-camera.width);
                }else{
                    Alert.show("无法获得显微镜");
                }
        }

        //public video and play after the expert accept
        private function publicVideo():void {
//            vdCtrl.localVdCam_vd.attachCamera(null);
//            camera=Camera.getCamera(null);
            video.attachCamera(null);// 关闭显微镜
//            cameraIndex = startInit.cameraSelection_cb.selectedIndex; //get the camera index
//            camera = Camera.getCamera(cameraIndex.toString()); //get the camera
            try {
                 mic = Microphone.getEnhancedMicrophone();
//                mic.gain = 50;
                var h264Settings:H264VideoStreamSettings = new H264VideoStreamSettings();
               // h264Settings.setProfileLevel(H264Profile.BASELINE, H264Level.LEVEL_3_1);
                h264Settings.setProfileLevel(H264Profile.BASELINE, H264Level.LEVEL_5_1);
                h264Settings.setMode(2592,1944,24);
                h264Settings.setQuality(0,100);
                camera.setQuality(0, 100);
                camera.setMode(2592,1944,24,true);
                camera.setKeyFrameInterval(15);

                var vi:Video = new Video(camera.width,camera.height);
                vi.width = vdCtrl.localVdCam_vd.width;
                vi.height = vdCtrl.localVdCam_vd.height;

                inStream = new NetStream(_netConnection);
                vi.attachNetStream(inStream);
                inStream.client = new Services();
                inStream.play("media-sound");
                vi.attachCamera(camera);  //get the local camera
                vdCtrl.localVdCam_vd.addChild(vi);
                video=vi;
                //public video and play audio to expert
                outStream = new NetStream(_netConnection);
                outStream.videoStreamSettings = h264Settings;
                outStream.client = new Services();
                outStream.attachCamera(camera);
                outStream.attachAudio(mic);
                outStream.publish("media-call");

            } catch (e:ErrorEvent) {
                Alert.show("发布视频出错");
            }

        }

        //物镜复位，为对焦做准备
        private function focusReset():void {
            _lc.sendMessageFun("$0MR20000000000!");
        }

        /*****************    处理显微镜      ***********************/

        /*****************     对话面板      *************************/
        [Embed(source="../../../../../../resources/assets/sound/msgS.mp3")]
        private var soundClass:Class;

        [Bindable] private var _connected:String = "UnConnected";
        [Bindable] private var _remoteUser:String;

        public function get remoteUser():String {
            return _remoteUser;
        }

        public function set remoteUser(value:String):void {
            _remoteUser = value;
        }

        private function showMessageEventHandler(e:ConServerBarEvent):void {
            var soundAsset:SoundAsset = new soundClass() as SoundAsset;
            soundAsset.play();
            _remoteUser = e.remoteUser;
            msgArea.text += _remoteUser + "  :  " + e.data + "\n";
            msgArea.scroller.verticalScrollBar.value=msgArea
                    .scroller.verticalScrollBar.maximum;
        }

        private function sendMessageEventHandler(event:SendPanelEvent):void {
            trace("remote user"+_remoteUser);
            _netConnection.call("sendMsg", null, _remoteUser, event._msg);
            msgArea.text += "我 :  " + event._msg + "\n";
            sendPanel.say.text = "";
            msgArea.scroller.verticalScrollBar.value=msgArea
                    .scroller.verticalScrollBar.maximum;
        }

        /*********************    对话完成，页面操作写到txt文件中            *******************/
        private function writeToTxt(obj:Object):void {
            WriteToText.writeToTxtLog(obj.toString());
        }
        ]]>
    </fx:Script>

    <s:HGroup width="100%" height="80%">

        <!--<videoContext:VideoCtrl id="vdCtrl" width="{FlexGlobals.topLevelApplication.parent.width*0.75}"-->
                                <!--height="{FlexGlobals.topLevelApplication.height*0.8-30}" lc="{_lc}"/>-->
        <videoContext:VideoCtrl id="vdCtrl" width="75%"
                                height="100%" lc="{_lc}"/>
        <s:BorderContainer id="bcContainer" width="25%" height="100%" cornerRadius="5">

            <s:layout>
                <s:VerticalLayout paddingLeft="2" paddingBottom="2" paddingTop="2" paddingRight="2"/>
            </s:layout>
            <start:StartInit
                    id="startInit"
                    width="100%"
                    CloseComEvent="{_lc.closeComFun();}"
                    OpenComEvent="startInit_OpenComEventHandler(event)"
                    No_FocusInitEvent="No_focusInit()"
                    FocusInitEvent="focusInit()"
                    Obj_con_rest="focusReset()"
                    CameraSelectionEvent="startInit_CameraSelectionEventHandler(event)"/>

            <commands:Command id="commandPanel" width="100%" height="100%" lc="{_lc}"/>

        </s:BorderContainer>

    </s:HGroup>

    <s:HGroup width="100%" height="20%">

        <s:HGroup width="60%" height="100%">
            <img:ImageBox id="imgShwList"
                          width="100%" height="100%"
                          cornerRadius="5"/>

            <img:PicHandler id="picHandler"
                            cornerRadius="5"
                            editorPicEvent="edit_bt_clickHandler()"
                            exitPicEvent="exit_bt_clickHandler()"
                            mergePicEvent="merge_bt_clickHandler()"
                            takePicEvent="picHandler_takePicEventHandler()"/>
        </s:HGroup>

        <!--对话面板-->
        <s:VGroup  width="40%" height="100%">
            <s:HGroup width="100%" height="100%">

                <s:TextArea width="100%" id="msgArea" height="100%" />
            </s:HGroup>

            <sendPanel:SendPanel
                    width="100%" id="sendPanel"
                    sendMessageEvent="sendMessageEventHandler(event)"/>
        </s:VGroup>

    </s:HGroup>

</s:VGroup>
